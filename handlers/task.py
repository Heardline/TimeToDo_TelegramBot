
from datetime import datetime
from aiogram.types.callback_query import CallbackQuery
from aiogram.types.inline_keyboard import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types.reply_keyboard import ReplyKeyboardMarkup
from sqlalchemy import select, delete, and_, update
from aiogram.dispatcher import FSMContext
from commands import get_student

from callback_data import task_callback
from states import TaskState
from utils.db.db import Lesson, Task
from aiogram import types
import utils.time_lessons as time_lesson
from simple_calendar import SimpleCalendar

# –ú–µ–Ω—é –∑–∞–¥–∞—á

async def task(message: types.Message):
    inline_button_add = InlineKeyboardButton(
        '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üìã', callback_data=task_callback.new(0, 'add'))
    inline_button_remove_all = InlineKeyboardButton(
        '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ üí•', callback_data=task_callback.new(0, 'remove_all'))
    inline_task = InlineKeyboardMarkup().row(
        inline_button_add, inline_button_remove_all)
    await message.answer('<b> üí° –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ </b>', parse_mode='HTML', reply_markup=inline_task)
    db_session = message.bot.get('db')
    async with db_session() as session:
        sql = select(Task).where(Task.student == message.from_user.id)
        request = await session.execute(sql)
        tasks = request.scalars()
        k = 0
        for task in tasks:
            k += 1
            inline_task = InlineKeyboardMarkup()
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≥–æ—Ç–æ–≤–∞ —Ç–æ –Ω–µ –Ω–∞–¥–æ –∫–Ω–æ–ø–∫–∏
            if task.status != '–ì–æ—Ç–æ–≤–æ':
                inline_task.insert(InlineKeyboardButton(
                    '–í—ã–ø–æ–ª–Ω–µ–Ω–æ‚úÖ', callback_data=task_callback.new(task.id, 'done')))
            inline_task.insert(InlineKeyboardButton(
                '–£–¥–∞–ª–∏—Ç—åüí•', callback_data=task_callback.new(task.id, 'delete')))
            inline_task.insert(InlineKeyboardButton(
                '–ò–∑–º–µ–Ω–∏—Ç—å‚öô', callback_data=task_callback.new(task.id, 'change')))
            await message.answer(f"<b> {time_lesson.emojiStatus[task.status]} {task.lesson} | {task.name} | {task.desc} \n –°—Ä–æ–∫ –¥–æ {time_lesson.emojiToday[task.time.weekday()+1]} - {task.time.strftime('%d.%m.%y')} </b> \n ", parse_mode='HTML', reply_markup=inline_task)
        if k == 0:
            await message.answer("–ü–æ–∫–∞ —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç—É –∑–∞–¥–∞—á", parse_mode='HTML')

# –ü–æ–¥–º–µ–Ω—é - —É—Ç–æ—á–Ω—è–µ–º –¥–∞—Ç—É

async def task_add(message: types.Message):
    await message.reply("–î–æ –∫–∞–∫–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=await SimpleCalendar().start_calendar())

# –ü–æ–¥–º–µ–Ω—é - —É—Ç–æ—á–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ

async def task_name(message: types.Message, state: FSMContext):
    if message.text != '–û—Ç–º–µ–Ω–∞':
        async with state.proxy() as data:
            data['lesson'] = message.text
            await TaskState.task_select.set()
            await message.answer("–õ–∞–¥—ã, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ —á–µ—Ä–µ–∑ @ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ \
                (–°–¥–∞—Ç—å –¥–∑ @ –ù–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –º–∞—Ç–∞–Ω —Å—Ç.25 ‚Ññ2,3,4)", reply_markup=types.ReplyKeyboardRemove())
    else:
        await state.finish()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

# –ü–æ–¥–º–µ–Ω—é - –∑–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ

async def task_select(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        db_session = message.bot.get('db')
        async with db_session() as session:
            task = Task(name=message.text.split("@")[0], desc=message.text.split("@")[
                        1], student=message.from_user.id, lesson=data['lesson'], time=data['time'], status='–ù–µ –≥–æ—Ç–æ–≤–æ')
            session.add(task)
            await session.commit()
        await message.answer(f'–î–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á—É: {task.name} | {task.desc}', reply_markup=types.ReplyKeyboardRemove())
        await state.finish()


''' CALLBACK BLOCK '''

async def process_simple_calendar(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        async with state.proxy() as data:
            data['time'] = date
            db_session = callback_query.message.bot.get('db')
            async with db_session() as session:
                student = await get_student(session, callback_query.message.chat.id)
                group = student.grp
                sql = select(Lesson).where(
                    and_(Lesson.grp == group, Lesson.day == datetime.datetime.weekday(date)))
                request = await session.execute(sql)
                lessons = request.scalars()
                keyboard = ReplyKeyboardMarkup()
                keyboard.insert(InlineKeyboardButton('–î—Ä—É–≥–æ–µ'))
                for lesson in lessons:
                    keyboard.insert(InlineKeyboardButton(str(lesson.name)))
                keyboard.insert(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞'))
                await callback_query.message.answer("–û–∫. –ê –∫–∞–∫–∞—è –ø–∞—Ä–∞?", reply_markup=keyboard)
                await TaskState.task_name.set()

# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

async def task_done(callback_query: CallbackQuery, callback_data: dict):
    db_session = callback_query.message.bot.get('db')
    async with db_session() as session:
        sql = update(Task).where(Task.id == int(
            callback_data['id'])).values(status='–ì–æ—Ç–æ–≤–æ')
        await session.execute(sql)
        await session.commit()
    await callback_query.message.edit_text('‚úÖ ' + str(callback_query.message.text)[1:])

# –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

async def task_delete(callback_query: CallbackQuery, callback_data: dict):
    db_session = callback_query.message.bot.get('db')
    async with db_session() as session:
        sql = delete(Task).where(Task.id == int(callback_data['id']))
        await session.execute(sql)
        await session.commit()
    await callback_query.message.delete()

# –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
'''async def task_change(callback_query: CallbackQuery, callback_data: dict):
    db_session = callback_query.message.bot.get('db')
    async with db_session() as session:
'''

async def task_add_handler(callback_query: CallbackQuery, state: FSMContext):
    await task_add(callback_query.message, state)
